package controllers;

import models.Question;
import models.Quiz;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.TreeMap;


/**
 * This class manipulates the QuizServerModel by taking inputs from a user.
 *
 * It also builds the Quiz Assets required to create a
 * Quiz on the server side (a QuestionSet, an AnswerSet)
 *
 * It should be constructed with a QuizServerModel.
 */
public interface QuizServerController extends Remote {

    /**
     * Get a new Id generated by the model
     */
    public int generateIdUniqueOnThisModel() throws RemoteException;

    /**
     * Retrieves the quizzes currently available on the server as a tree map
     *
     * @return the data structure of the quizzes
     */
    TreeMap<Integer, Quiz> getModelQuizzes() throws RemoteException;

    /**
     * Submits a score to the server at the end of a game
     *
     * @param quizId     the id of the quiz
     * @param score      the score the user achieved
     * @param playerName the name given by a user
     */
    void submitScore(int quizId, int score, String playerName) throws RemoteException;

    /**
     * Retrieves a quiz from the QuizServerModel with the given ID
     *
     * @param id the id of the quiz requested
     * @return a quiz with the given id
     */
    Quiz getQuizViaId(int id) throws RemoteException;

    /**
     * builds a Question object on the Server with the given resources
     *
     * @param question a string of the question to be asked, the answer options, the correct number of the answer
     * @return the built question
     */
    Question buildQuestion(String[] question) throws RemoteException;

    /**
     * builds a Quiz object on the Server with the given resources and adds it to the data structure
     *
     * @param quizAuthor the person that made the quiz
     * @param quizName   the name of the quiz
     * @param questions  the series of questions
     * @param quizId     the id generated
     * @return the quiz id
     */
    int buildQuizOnServer(String quizAuthor, String quizName, String[][] questions, int quizId) throws RemoteException;
}
