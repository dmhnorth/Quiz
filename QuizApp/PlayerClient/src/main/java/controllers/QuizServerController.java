package controllers;

import models.Quiz;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.TreeMap;


/**
 *
 * It manipulates the QuizServerModel by taking inputs from a user.
 *
 * It also builds the Quiz Assets required to create a
 * Quiz on the server side (a QuestionSet, an AnswerSet)
 *
 * It should be constructed with a QuizServerModel.
 *
 *
 *
 *
 */
public interface QuizServerController extends Remote {

    /**
     *
     * Variables to consider this must create one way or another = String quizName, Question[] questions, int[] answers, int generatedId
     *
     * to create a quiz and then calls the method to store it in the QuizServerModel,
     * finally returning the new quiz id
     *
     * @return the new quiz id int
     * @param quiz the quiz you require an id for
     */
    public int addQuizAndReturnId(Quiz quiz) throws RemoteException;


// Model interactions

    /**
     * Get a new Id generated by the model
     */
    public int generateIdUniqueOnThisModel() throws RemoteException;

    /**
     * Retrieves the quizzes currently available on the server as List
     * @return the data structure of the quizzes
     */
    TreeMap<Integer, Quiz> getModelQuizzes() throws RemoteException;

    /**
     * Submits a score to the server at the end of a game
     * @param quizId the id of the quiz
     * @param score the score the user achieved
     * @param playerName the name given
     */
    void submitScore(int quizId, int score, String playerName) throws RemoteException;

    /**
     * Retrieves a quiz from the server with the given ID
     * @param id the id of the quiz requested
     * @return a quiz with the given id
     */
    Quiz getQuizViaId(int id) throws RemoteException;
}
